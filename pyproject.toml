[dependency-groups]
ai-apps = [
    "ell-ai>=0.0.15",
    "langchain>=0.3.12",
    "megaparse>=0.0.45",
]
ai-train = [
    "datasets>=3.1.0",
    "einops>=0.8.0",
    "jaxtyping>=0.2.36",
    "pytorch-lightning>=2.4.0",
    "safetensors>=0.4.5",
    "scikit-learn>=1.6.0",
    "torch>=2.5.1",
    "transformers>=4.47.0",
    "umap-learn>=0.5.7",
]
cli = [
    "typer>=0.15.1",
]
config = [
    "cookiecutter>=2.6.0",
    "gin-config>=0.5.0",
    "jinja2>=3.1.4",
]
data = [
    "dagster>=1.9.5",
    "networkx>=3.4.2",
    "numpy>=1.26.4",
    "orjson>=3.10.12",
    "polars>=1.17.0",
    "tomli>=2.0.1",
]
dev = [
    "bandit>=1.8.0",
    "hypothesis>=6.122.3",
    "pip>=24.3.1",
    "pydoclint>=0.5.11",
    "pyinstrument>=5.0.0",
    "pyprojectsort>=0.3.0",
    "pyright>=1.1.390",
    "pytest-cases>=3.8.6",
    "pytest-cov>=6.0.0",
    "pytest-icdiff>=0.9",
    "pytest-mock>=3.14.0",
    "pytest-playwright>=0.6.2",
    "pytest-profiling>=1.8.1",
    "pytest-random-order>=1.1.1",
    "pytest-shutil>=1.8.1",
    "pytest-split>=0.10.0",
    "pytest-sugar>=1.0.0",
    "pytest-timeout>=2.3.1",
    "pytest>=8.3.4",
    "ruff>=0.8.3",
    "taplo>=0.9.3",
    "tox>=4.23.2",
    "uv>=0.5.7",
]
dev-doc = [
    "mdformat>=0.7.19",
    "mkdocs-material>=9.5.48",
    "mkdocs>=1.6.1",
]
dev-nb = [
    "jupyter-book>=1.0.3",
    "nbformat>=5.10.4",
    "nbqa>=1.9.1",
    "testbook>=0.4.2",
]
misc = [
    "wrapt>=1.17.0",
]
nb = [
    "chime>=0.7.0",
    "ipykernel>=6.29.5",
    "ipython>=7.34.0",
    "ipywidgets>=8.1.5",
    "jupyterlab>=4.3.3",
]
web = [
    "beautifulsoup4>=4.12.3",
    "fastapi>=0.115.6",
    "playwright>=1.49.1",
    "requests>=2.32.3",
    "uvicorn>=0.33.0",
    "zrok>=0.4.42",
]

[project]
dependencies = [
    "loguru-config>=0.1.0",
    "loguru>=0.7.3",
    "plotly>=5.24.1",
    "polyfactory",
    "pydantic>=2.10.3",
    "rich>=13.9.4",
    "safetensors>=0.4.5",
    "scikit-learn",
    "tokenize-rt",
]
name = "embedding-translation"
requires-python = ">=3.11,<3.13"
version = "0.1.0"
authors = [{ name = "Gatlen Culp", email = "gculp@mit.edu" }]
classifiers = [
    "Development Status :: 1 - Planning",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]
description = "A final project for MIT's Deep Learning class"
keywords = []
license = { file = "LICENSE.md" }
readme = {file = "README.md", content-type = "text/markdown"}

[project.urls]
Repository = "https://github.com/GatlenCulp/embedding_translation"

[tool.poetry.scripts]
embedding_tranlation = "src:main"

[tool.pydoclint]
allow-init-docstring = true
arg-type-hints-in-docstring = false
check-return-types = false
exclude = "\\.venv"
style = "google"

[tool.pyright]
include = [
    ".",
]
reportMissingTypeStubs = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false

[tool.pytest.ini_options]
addopts = "--show-capture=no\n--code-highlight=yes\n--tb=long\n-rA\n-x\n--doctest-modules\n--cov=src\n--cov-report=html\n--cov-report=term-missing:skip-covered\n--no-cov-on-fail\n"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
    "ignore::pydantic.warnings.PydanticDeprecatedSince20",
]
markers = [
    "potentially_harmful: mark test as potentially harmful to the system (uninstalls, etc.)",
]
pythonpath = [
    "src",
]
testpaths = [
    "tests",
]

[tool.ruff]
cache-dir = ".cache/ruff"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
extend-include = [
    "*.ipynb",
]
line-length = 88
target-version = "py312"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 88
indent-style = "space"
line-ending = "auto"
quote-style = "double"
skip-magic-trailing-comma = false

[tool.ruff.lint]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
fixable = [
    "A",
    "ANN",
    "ARG",
    "B",
    "BLE",
    "C",
    "COM",
    "D",
    "DJ",
    "DTZ",
    "E",
    "EM",
    "ERA",
    "EXE",
    "F",
    "FBT",
    "G",
    "I",
    "ICN",
    "INP",
    "ISC",
    "N",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "Q",
    "RET",
    "RSE",
    "RUF",
    "S",
    "SIM",
    "SLF",
    "T",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "W",
    "YTT",
]
ignore = [
    "COM812",
    "E203",
    "E266",
    "E501",
    "E731",
    "E741",
    "F722",
    "FA102",
    "FBT001",
    "FBT002",
    "FIX002",
    "INP001",
    "ISC001",
    "PGH003",
    "TC002",
    "TD002",
    "TD003",
]
select = [
    "ALL",
]
unfixable = []

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.isort]
force-single-line = true
lines-after-imports = 2

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",
]

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 5
max-branches = 12
max-locals = 15
max-public-methods = 20
max-returns = 6
max-statements = 50
